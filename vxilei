v0:
#include<stdio.h>
#include<string.h>
int main()
{
	char str[]="3+4";
	int l=str[0]-'0';
	int r=str[2]-'0';
	int res=l+r;


    printf("%d",res);

    return 0;
}



v3
#include<stdio.h>
#include<string.h>
int main()
{
	char str[]="2+2*3+2/2-1";
	int res=str[0]-'0',nb=str[0]-'0';
	int i = 1,j=1;
	for(i;i<strlen(str);i++)
	{
		if(str[i]=='*')
		{
			int right=str[i+1]-'0';
			res=res*right;
			i++;
		}
		else if(str[i]=='/')
		{
			int right=str[i+1]-'0';
			res=res/right;
			i++;
		}
	}
	for(j;j<strlen(str);j++)
	{
		if(str[j]=='+')
		{
			int right=str[j+1]-'0';
			nb=nb+right;
			j++;
		}
		else if(str[j]=='-')
		{
			int right=str[j+1]-'0';
			nb=nb-right;
			j++;
		}

	}
	nb+=res;
	printf("nb=%d\n",nb);

    return 0;
}


v2
#include<stdio.h>
#include<string.h>
int main()
{
	char str[]="2*2/4*1/1*2*3/2";
	int res=str[0]-'0',nb=str[0]-'0';
	int i = 1,j=1;
	for(i;i<strlen(str);i++)
	{
		if(str[i]=='*')
		{
			int right=str[i+1]-'0';
			res=res*right;
			i++;
		}
		else if(str[i]=='/')
		{
			int right=str[i+1]-'0';
			res=res/right;
			i++;
		}
	}
	
	printf("res=%d\n",res);

    return 0;
}

v1
#include<stdio.h>
#include<string.h>
int main()
{
	char str[]="1+2+2+1+2+5+4-1-3+4-8";
	int res=str[0]-'0',nb=str[0]-'0';
	int i = 1,j=1;
	for(i;i<strlen(str);i++)
	{
		if(str[i]=='+')
		{
			int right=str[i+1]-'0';
			res=res+right;
			i++;
		}
		else if(str[i]=='-')
		{
			int right=str[i+1]-'0';
			res=res-right;
			i++;
		}
	}
	

	printf("res=%d\n",res);

    return 0;
}

v4...
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int isNumber(char *ch);
int isArithmeticSymbol(char *ch);
int checkValid(char *str);
double strToDouble(char *buf);
int  strToInt(char *str);
int  getOperateValue(char *caclStr,double * num);
double compute(const double *operandValues,char *caclSymbol); 
double caculate(char *caclStr);
int main()
{
	char caclStr[100]={'\0'};
	double result=0.0;
	while(1)
	{
	    

		system("color 0f");
		
		printf("请输入四则混合运算表达式[quit-结束]：");
		gets(caclStr);
		if(strcmp(caclStr,"quit")==0) 
		{
			printf("谢谢您使用四则混合运算计算器程序，再见！！！\n");
			exit(0);
		}
		
		if (!checkValid(caclStr)) continue;
		
		result=caculate(caclStr);
		
 		printf("%s=%.2f\n",caclStr,result);
	}
	return 0;
}
int isArithmeticSymbol(char *ch)
{
   int flag=0;
   if(*ch=='+' || *ch=='-' || *ch=='*' || *ch=='/')
   {
	   flag=1;
   }
   return flag;

}
int isNumber(char *ch)
{
   int flag=0;
   if(*ch>='0' && *ch<='9')
   {
	   flag=1;
   }
   return flag;

}
int checkValid(char *str)
{

	int i=0;
	int count_num=0,count_symbol=0;
	int validFlag=1;
	while(*str !='\0')
	{
   
		if(isNumber(str)==0)
			if(!(*str=='+' || *str=='-' || *str=='*' || *str=='/'|| *str=='.'))
			{
				validFlag=0;
				break;
			}
		if(*str>='0' && *str<='9' || *str=='.' ) 
		{
			count_num++;
		}
		if(*str=='+' || *str=='-' || *str=='*' || *str=='/') 
		{
			count_symbol++;
		}

	
		str++;
	}
	if(count_num<2 ||count_symbol<1)
	{
        validFlag=0;
	}
	return validFlag;
}
double caculate(char *caclStr)
{
	double  caclValues[10]={0};
	char    caclOperates[10]={'\0'};
	char    buf[10]={'\0'};
	int     i=0,j=0,k=0,t=0;
	double result=0.0;
	double tempNum=0.0;
	i=0;

    while(*caclStr != '\0')
	{
		if(isNumber(caclStr))
		{

			
			i=getOperateValue(caclStr,&tempNum);
			caclValues[j]=tempNum;
			j++;
			caclStr=caclStr+i;
		}
	
		if(isArithmeticSymbol(caclStr))
		{
			
			if(*caclStr=='*')
			{
                caclStr++;
				i=getOperateValue(caclStr,&tempNum);
				j--;
			    caclValues[j]=caclValues[j] * tempNum;
				j++;
				caclStr=caclStr+i;
			}
			
			if(*caclStr=='/')
			{
                caclStr++;
				i=getOperateValue(caclStr,&tempNum);
				j--;
			    caclValues[j]=caclValues[j] / tempNum;
				j++;
				caclStr=caclStr+i;
			}
			if(*caclStr=='+' || *caclStr=='-')
			{
				caclOperates[k++]=*caclStr;
			
			}
		
		}

		caclStr++;
	}

	
	caclOperates[k]='\0';
	return compute(caclValues,caclOperates);
}
double compute(const double * caclValues1,char * caclOperates)
{
	int i=0;
	double result=0.0;
	i=0;
	result=caclValues1[0] ;
	while(caclOperates[i] != '\0')
	{
        
		switch(caclOperates[i])
		{
			case '+':
			
				result =result + caclValues1[i+1];
				break;
			case '-':
				
				result =result - caclValues1[i+1];
				break;
			case '*':
			
				result =result * caclValues1[i+1];
				break;
			case '/':
			
				result =result / caclValues1[i+1];
				break;
		}
		i++;
	}
	return result;
}
int strToInt(char str[])
{
	int i,num=0;
	for(i=0;str[i]!='\0';i++)
		if(str[i]>='0'&&str[i]<='9')
			num=num*10+str[i]-'0';
	return (num);

}
double strToDouble(char buf1[])
{

	int i;
	double num=0.0;
	i=strlen(buf1);
	for(;i>=0;i--)
	{
		if(buf1[i]>='0'&&buf1[i]<='9')
			num=num/10+buf1[i]-'0';
	}
	return (num/10);

}
int getOperateValue(char *caclStr,double * num)
{
    char buf[10]={'\0'};
	int i=0;
	int t=0;
	t=0; 
	while(*caclStr>='0' && *caclStr<='9')
	{
		buf[t]=*caclStr;
		i++;
		caclStr++;
		t++;
	}
	buf[t]='\0'; 
	*num=strToInt(buf);
	if(*caclStr=='.'){
		i++;
		caclStr++;
		t=0;
		while(*caclStr>='0' && *caclStr<='9')
		{
			buf[t]=*caclStr;
			i++;
			caclStr++;
			t++;
		}
		buf[t]='\0'; 
		*num=*num+strToDouble(buf);
	}
	return i;

}
